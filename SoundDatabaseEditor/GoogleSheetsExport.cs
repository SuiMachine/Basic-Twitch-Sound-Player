using Google.Apis.Auth.OAuth2;
using Google.Apis.Sheets.v4;
using Google.Apis.Sheets.v4.Data;
using Google.Apis.Services;
using Google.Apis.Util.Store;
using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using System.Diagnostics;
using System.Windows.Forms;
using System.Linq;

namespace BasicTwitchSoundPlayer.SoundDatabaseEditor
{
    class GoogleSheetsExport
    {
        private enum ValueTypeFormatting
        {
            Normal,
            Header,
            DateTime
        }
        readonly string[] Scopes = { SheetsService.Scope.Spreadsheets };
        string ApplicationName = "Sui's Twitch Sound Player";
        public bool WasSuccess { get; private set; }

        public GoogleSheetsExport(string spreadsheetId, char prefixCharacter, List<Structs.SoundEntry> soundsEntries)
        {
            WasSuccess = false;
            var batchRequests = new BatchUpdateSpreadsheetRequest() { Requests = new List<Request>()};

            if (File.Exists("credentials.json"))
            {
                UserCredential credential;
                try
                {
                    using (var stream = new FileStream("credentials.json", FileMode.OpenOrCreate, FileAccess.ReadWrite))
                    {
                        string credPath = "token.json";
                        credential = GoogleWebAuthorizationBroker.AuthorizeAsync(
                            GoogleClientSecrets.Load(stream).Secrets,
                                        Scopes,
                                        "user",
                                        CancellationToken.None,
                                        new FileDataStore(credPath, true)).Result;
                        Console.WriteLine("Credential file saved to: " + credPath);
                    }

                    // Create Google Sheets API service.
                    var service = new SheetsService(new BaseClientService.Initializer()
                    {
                        HttpClientInitializer = credential,
                        ApplicationName = ApplicationName,
                    });

                    //Get spreadsheets
                    var spreadsheets = service.Spreadsheets.Get(spreadsheetId).Execute();

                    //Clear existing Spreadsheets
                    {
                        var tmp = spreadsheets.Sheets.FirstOrDefault(x => x.Properties.Title == "Temp");
                        if (tmp == null)
                        {
                            var AddSheetTmp = new AddSheetRequest
                            {
                                Properties = new SheetProperties()
                            };
                            AddSheetTmp.Properties.Title = "Temp";
                            AddSheetTmp.Properties.SheetId = 999;
                            batchRequests.Requests.Add(new Request() { AddSheet = AddSheetTmp });
                        }
                    }

                    foreach (var sheet in spreadsheets.Sheets)
                    {
                        if (sheet.Properties.Title == "Autogenerated")
                        {
                            batchRequests.Requests.Add(new Request() { DeleteSheet = new DeleteSheetRequest() { ETag = sheet.ETag, SheetId = sheet.Properties.SheetId } });
                        }
                    }

#pragma warning disable IDE0017 // No it can't be simplified, because then VisualStudio thinks it should look in Project Properties
                    var properties = new SheetProperties();
#pragma warning restore IDE0017
                    properties.Title = "Autogenerated";
                    properties.SheetId = 0;
                    var addSheetRequest = new AddSheetRequest
                    {
                        Properties = properties
                    };
                    batchRequests.Requests.Add(new Request() { AddSheet = addSheetRequest });

                    var appendData = new AppendCellsRequest
                    {
                        SheetId = addSheetRequest.Properties.SheetId,
                        Fields = "*"
                    };
                    var rowList = appendData.Rows = new List<RowData>();
                    rowList.Add(new RowData() { Values = new List<CellData>() });

                    foreach (var sound in soundsEntries)
                    {
                        var rowData = new RowData
                        {
                            Values = new List<CellData>()
                        };
                        rowData.Values.Add(new CellData
                        {
                            UserEnteredValue = new ExtendedValue() { StringValue = prefixCharacter + sound.GetCommand() },
                            UserEnteredFormat = GetCellStyle(sound.GetRequirement())
                        });
                        rowData.Values.Add(new CellData
                        {
                            UserEnteredValue = new ExtendedValue() { StringValue = sound.GetAllFiles().Count() > 1? "multiple" : Path.GetFileName(sound.GetAllFiles().First()) },
                            UserEnteredFormat = GetCellStyle(sound.GetRequirement()),
                        });
                        rowData.Values.Add(new CellData
                        {
                            UserEnteredValue = new ExtendedValue() { StringValue = sound.GetDescription() },
                            UserEnteredFormat = GetCellStyle(sound.GetRequirement())
                        });
                        rowData.Values.Add(new CellData
                        {
                            UserEnteredValue = new ExtendedValue() { NumberValue = sound.GetDateAdded().ToOADate() },
                            UserEnteredFormat = GetCellStyle(sound.GetRequirement(), ValueTypeFormatting.DateTime)
                        });
                        rowList.Add(rowData);
                    }

                    rowList[0].Values.Add(new CellData() { UserEnteredValue = new ExtendedValue() { StringValue = string.Format("({0}) Command (total: {1})", prefixCharacter, soundsEntries.Count )}, UserEnteredFormat = GetCellStyle(Structs.TwitchRightsEnum.Disabled, ValueTypeFormatting.Header) });
                    rowList[0].Values.Add(new CellData() { UserEnteredValue = new ExtendedValue() { StringValue = "File" }, UserEnteredFormat = GetCellStyle(Structs.TwitchRightsEnum.Disabled, ValueTypeFormatting.Header) });
                    rowList[0].Values.Add(new CellData() { UserEnteredValue = new ExtendedValue() { StringValue = "Description" }, UserEnteredFormat = GetCellStyle(Structs.TwitchRightsEnum.Disabled, ValueTypeFormatting.Header) });
                    rowList[0].Values.Add(new CellData() { UserEnteredValue = new ExtendedValue() { StringValue = "Updated (UTC)" }, UserEnteredFormat = GetCellStyle(Structs.TwitchRightsEnum.Disabled, ValueTypeFormatting.Header) });
                    rowList[0].Values.Add(new CellData() { UserEnteredValue = new ExtendedValue() { StringValue = "" } });
                    rowList[0].Values.Add(new CellData() { UserEnteredValue = new ExtendedValue() { StringValue = "Colors:" }, UserEnteredFormat = GetCellStyle(Structs.TwitchRightsEnum.Disabled, ValueTypeFormatting.Header) });
                    rowList[1].Values.Add(new CellData() { UserEnteredValue = new ExtendedValue() { StringValue = "" } });
                    rowList[1].Values.Add(new CellData() { UserEnteredValue = new ExtendedValue() { StringValue = "Admin only" }, UserEnteredFormat = GetCellStyle(Structs.TwitchRightsEnum.Admin) });
                    rowList[2].Values.Add(new CellData() { UserEnteredValue = new ExtendedValue() { StringValue = "" } });
                    rowList[2].Values.Add(new CellData() { UserEnteredValue = new ExtendedValue() { StringValue = "Moderators" }, UserEnteredFormat = GetCellStyle(Structs.TwitchRightsEnum.Mod) });
                    rowList[3].Values.Add(new CellData() { UserEnteredValue = new ExtendedValue() { StringValue = "" } });
                    rowList[3].Values.Add(new CellData() { UserEnteredValue = new ExtendedValue() { StringValue = "Subscribers + Trusted" }, UserEnteredFormat = GetCellStyle(Structs.TwitchRightsEnum.TrustedSub) });
                    rowList[4].Values.Add(new CellData() { UserEnteredValue = new ExtendedValue() { StringValue = "" } });
                    rowList[4].Values.Add(new CellData() { UserEnteredValue = new ExtendedValue() { StringValue = "Public" }, UserEnteredFormat = GetCellStyle(Structs.TwitchRightsEnum.Public) });
                    batchRequests.Requests.Add(new Request() { AppendCells = appendData });
                    batchRequests.Requests.Add(new Request() { AutoResizeDimensions = new AutoResizeDimensionsRequest() { Dimensions = new DimensionRange() { SheetId = addSheetRequest.Properties.SheetId, Dimension = "COLUMNS" } } });
                    batchRequests.Requests.Add(new Request() { DeleteSheet = new DeleteSheetRequest() { SheetId = 999 } });

                    var request = service.Spreadsheets.BatchUpdate(batchRequests, spreadsheetId);
                    var response = request.Execute();
                    batchRequests.Requests.Clear();
                    WasSuccess = true;
                }
                catch (Exception e)
                {
                    MessageBox.Show(e.ToString(), "Exception error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                }
            }
            else
            {
                MessageBox.Show("File doesn't exists");
            }
        }

        Sheet GeneratedSoundList(List<Structs.SoundEntry> entries)
        {
            var sheet = new Sheet
            {
                Data = new List<GridData>()
            };
            for (int i=0; i<entries.Count; i++)
            {
                ValueRange valueRange = new ValueRange
                {
                    MajorDimension = "ROWS"//"ROWS";//COLUMNS
                };

                var tmp = new GridData
                {
                    RowData = new List<RowData>()
                };
                var rowData = new RowData
                {
                    Values = new List<CellData>()
                };
                rowData.Values.Add(new CellData() { FormattedValue = entries[i].GetCommand() });
                rowData.Values.Add(new CellData() { FormattedValue = entries[i].GetAllFiles().Count() > 1 ? "multiplie entries" : entries[i].GetAllFiles().First() });
                rowData.Values.Add(new CellData() { FormattedValue = entries[i].GetRequirement().ToString() });

                tmp.RowData.Add(rowData);
                sheet.Data.Add(tmp);
            }
            return sheet;
        }

        private CellFormat GetCellStyle(Structs.TwitchRightsEnum right, ValueTypeFormatting formatType = ValueTypeFormatting.Normal)
        {
            var newFormat = new CellFormat()
            {
                Borders = new Borders()
                {
                    Top = new Border() { Color = new Color() { Red = 0, Green = 0, Blue = 0, Alpha = 0 }, Style = "SOLID" },
                    Bottom = new Border() { Color = new Color() { Red = 0, Green = 0, Blue = 0, Alpha = 0 }, Style = "SOLID" },
                    Left = new Border() { Color = new Color() { Red = 0, Green = 0, Blue = 0, Alpha = 0 }, Style = "SOLID" },
                    Right = new Border() { Color = new Color() { Red = 0, Green = 0, Blue = 0, Alpha = 0 }, Style = "SOLID" },
                }
            };
            if (formatType == ValueTypeFormatting.Header)
                newFormat.TextFormat = new TextFormat() { Bold = true };
            else
            {
                switch (right)
                {
                    case Structs.TwitchRightsEnum.Admin:
                        newFormat.BackgroundColor = new Color() { Red = 1, Green = 0, Blue = 0, Alpha = 0 };
                        break;
                    case Structs.TwitchRightsEnum.Mod:
                        newFormat.BackgroundColor = new Color() { Red = 0, Green = 1, Blue = 0, Alpha = 0 };
                        break;
                    case Structs.TwitchRightsEnum.TrustedSub:
                        newFormat.BackgroundColor = new Color() { Red = 0.95f, Green = 0.95f, Blue = 1, Alpha = 0 };
                        break;
                    case Structs.TwitchRightsEnum.Public:
                        newFormat.BackgroundColor = new Color() { Red = 1, Green = 1, Blue = 0.0069f, Alpha = 0 };
                        break;
                    default:
                        newFormat.TextFormat = new TextFormat() { Strikethrough = true };
                        break;
                }

                if(formatType == ValueTypeFormatting.DateTime)
                {
                    //	08/08/2018 17:22:23

                    newFormat.NumberFormat = new NumberFormat
                    {
                        Type = "date-time"
                    };
                }
            }

            return newFormat;
        }
    }
}
